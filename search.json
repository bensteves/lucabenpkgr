[{"path":"https://bensteves.github.io/lucabenpkgr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 lucabenpkgr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/articles/ben-index.html","id":"us-co2-consumption-by-fuel-type","dir":"Articles","previous_headings":"","what":"US CO2 Consumption by Fuel Type","title":"World Energy Consumption and Climate","text":"","code":"us_co2 <- world_climate %>%   filter(country_code == 'USA',           indicator_code %in% c(\"EN.ATM.CO2E.SF.KT\",                                 \"EN.ATM.CO2E.LF.KT\",                                 \"EN.ATM.CO2E.GF.KT\")) %>%    mutate(indicator_code_labelled = fct_recode(indicator_code,                                                 `Solid Fuel (Coal)` = \"EN.ATM.CO2E.SF.KT\",                                                `Liquid Fuel (Petroleum)` = \"EN.ATM.CO2E.LF.KT\",                                                `Gaseous Fuel (Natural Gas)` = \"EN.ATM.CO2E.GF.KT\")) plot_ly(data=us_co2,          x=~year,          y=~measure,          color=~indicator_code_labelled,          type=\"scatter\",          mode=\"lines\") %>%   layout(title = \"USA CO2 Consumption - Fuel Outputs\",          yaxis = list(title = \"CO2 Emissions (kt)\"),          xaxis = list(title = \"Year\", tickfont = list(size=10)),          legend = list(x = 0.8, y = 0.1))"},{"path":"https://bensteves.github.io/lucabenpkgr/articles/ben-index.html","id":"choropleth-maps","dir":"Articles","previous_headings":"","what":"Choropleth Maps","title":"World Energy Consumption and Climate","text":"just looking North South American countries - dataset 3 letter country codes, values filtered applied filter climate dataset.","code":"data(alpha3codes) alpha3codes <- alpha3codes %>% #  filter(region == \"Americas\") %>%   select(alpha_3) alpha3list <-  as.list(as.data.frame(t(alpha3codes))) world_climate <- world_climate %>%   filter(country_code %in% alpha3list) # Display a map for whatever year and indicator  show_maps <- function(df, id_code, map_title, years, color, b) {         temp_df <- df %>%         filter(indicator_code == id_code)           year <- df$year[1]           title <- paste(map_title, year, sep=', ')               plot_ly(type='choropleth', locations=temp_df$country_code,                 z=temp_df$measure, text=temp_df$country_name, colorscale=color             , reversescale = b) %>%         layout(title = title, geo = list(             scope = \"world\",             showframe = FALSE,             projection = list(type = 'eckert4'),             showlakes = TRUE,             lakecolor = toRGB('white'),             showocean=TRUE            #  oceancolor=\"LightBlue\" ))      }"},{"path":"https://bensteves.github.io/lucabenpkgr/articles/ben-index.html","id":"co2-gas-emissions","dir":"Articles","previous_headings":"Choropleth Maps","what":"CO2 Gas emissions","title":"World Energy Consumption and Climate","text":"","code":"years <- list(\"1997\", \"2007\", \"2017\") years <- ymd(years, truncated = 2L) df1997 <- world_climate %>% filter(year == years[[1]]) df2007 <- world_climate %>% filter(year == years[[2]]) df2017 <- world_climate %>% filter(year == years[[3]]) df_list <- list(df1997, df2007, df2017) id_code1 = \"EN.ATM.GHGT.KT.CE\" map_title1 = \"Total greenhouse gas emissions (kt of CO2 equivalent)\" output1 <- tagList(lapply(df_list, show_maps, id_code=id_code1,                    map_title=map_title1, years=years, color=\"Reds\", b=F)) output1"},{"path":"https://bensteves.github.io/lucabenpkgr/articles/ben-index.html","id":"renewable-electricity-output","dir":"Articles","previous_headings":"Choropleth Maps","what":"Renewable Electricity Output","title":"World Energy Consumption and Climate","text":"","code":"id_code2 = \"EG.FEC.RNEW.ZS\" map_title2 = \"Total amount of electricity from renewable energy sources (% total)\" output2 <-tagList(lapply(df_list, show_maps, id_code=id_code2,                    map_title=map_title2, years=years, color=\"Greens\", b= T)) output2"},{"path":"https://bensteves.github.io/lucabenpkgr/articles/ben-index.html","id":"tabular-view---renewable-energy-output","dir":"Articles","previous_headings":"","what":"Tabular View - Renewable Energy Output","title":"World Energy Consumption and Climate","text":"","code":"elec_perc <- world_climate %>%   filter(year %in% years,           indicator_code == id_code2) %>%           pivot_wider(names_from = year, values_from = measure) %>%           select(country_name, `1997-01-01`, `2007-01-01`, `2017-01-01`) %>%           filter(!is.na(`1997-01-01`)) %>%           rename(Country = \"country_name\",                  `1997` = `1997-01-01`,                  `2007` = `2007-01-01`,                  `2017` = `2017-01-01`) elec_perc_cond <- elec_perc %>%    mutate(highlight97 = ifelse(`1997` >= 25.0 , \"#90EE90\", \"white\"),           highlight07 = ifelse(`2007` >= 25.0 , \"#90EE90\", \"white\"),           highlight17 = ifelse(`2017` >= 25.0 , \"#90EE90\", \"white\")) plot_ly(data=elec_perc,         type='table',        # columnorder = c(1,2,3,4),         columnwidth = c(10, 10, 10, 10),         header = list(           values = c(names(elec_perc)),           align = c('left', rep('center', ncol(elec_perc))),           line = list(width = 1, color = 'black'),           fill = list(color = 'rgb(45, 112, 230)'),           font = list(family = \"Arial\", size = 14, color = \"white\")         ),         cells = list(values=                        rbind( t(as.matrix(unname(elec_perc)))),                        align = c('left', rep('center', ncol(elec_perc))),                       line = list(color = \"black\", width = 1),                       fill = list(color = list('rgb(176, 200, 232)',                                                elec_perc_cond$highlight97,                                                elec_perc_cond$highlight07,                                                elec_perc_cond$highlight17)),                       font = list(family = \"Arial\", size = 12, color = c(\"black\"))                      )                  )"},{"path":"https://bensteves.github.io/lucabenpkgr/articles/luca-index.html","id":"lego-visualization","dir":"Articles","previous_headings":"","what":"Lego Visualization","title":"Lego Star Wars","text":"","code":"#> Adding more colors to the selection color palette. #> We recommend setting `persistent` to `FALSE` (the default) because persistent selection mode can now be used by holding the shift key (while triggering the `on` event). #> Setting the `off` event (i.e., 'plotly_deselect') to match the `on` event (i.e., 'plotly_selected'). You can change this default via the `highlight()` function."},{"path":"https://bensteves.github.io/lucabenpkgr/articles/luca-index.html","id":"lego-data-set","dir":"Articles","previous_headings":"","what":"Lego Data Set","title":"Lego Star Wars","text":"https://www.kaggle.com/rtatman/lego-database/version/1?select=themes.csv made merging themes.csv sets.csv filtering themes containing ‘Star Wars’","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/articles/luca-index.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Lego Star Wars","text":"https://plotly-r.com/index.html","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/articles/luca-index.html","id":"reflection","dir":"Articles","previous_headings":"","what":"Reflection","title":"Lego Star Wars","text":"ideas suggestions Claus Wilke’s helped shaped visualization originally trying create visualization show sets within Lego themes across years. However, quickly became cluttered hard gain meaningful information . Thus went route looking Star Wars themes code built easy modify look particular sets compare. wish able create comparison ability filters compare different sets just Star Wars without becoming cluttered set. also want fix axis visual aesthetics. interesting part plotly highlight function trying color lines click also able select set names within theme order compare.","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ben Steves. Author, maintainer. Luca Seazzu. Author.","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Steves B, Seazzu L (2022). lucabenpkgr: Luca Ben's Package, Data 303 @ Calvin University. R package version 0.0.0.9000, https://bensteves.github.io/lucabenpkgr.","code":"@Manual{,   title = {lucabenpkgr: Luca and Ben's Package, Data 303 @ Calvin University},   author = {Ben Steves and Luca Seazzu},   year = {2022},   note = {R package version 0.0.0.9000},   url = {https://bensteves.github.io/lucabenpkgr}, }"},{"path":"https://bensteves.github.io/lucabenpkgr/reference/df_apply.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply a function on each column of a data frame given a condition — df_apply","title":"Apply a function on each column of a data frame given a condition — df_apply","text":"Apply function column data frame given condition","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/reference/df_apply.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply a function on each column of a data frame given a condition — df_apply","text":"","code":"df_apply(.data, .f, .condition = is.numeric, .else = identity, ...)"},{"path":"https://bensteves.github.io/lucabenpkgr/reference/df_apply.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply a function on each column of a data frame given a condition — df_apply","text":".data data frame .f function apply data frame .condition Default value \".numeric\", can another data type .else Default value \"identity\" (skips column) ... arguments .f pass","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/reference/df_apply.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply a function on each column of a data frame given a condition — df_apply","text":"tibble","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://bensteves.github.io/lucabenpkgr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://bensteves.github.io/lucabenpkgr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""}]
